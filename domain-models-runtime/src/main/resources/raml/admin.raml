#%RAML 0.8

title: Admin API
baseUri: http://localhost:8081/{version}
version: v1

traits:
  - log-level: !include traits/log-level.raml
  - upload-handler: !include traits/upload-handler.raml
  - history: !include traits/history.raml
  - secured: !include ../../../../../raml-util/traits/auth.raml

/admin:
  /uploadmultipart:
    description: Uploads a file and saves it to a directory configured on the server
    post:
      is: [secured, upload-handler]
      description: |
          Uploads a file and saves it to a directory configured on the server
      body:
        multipart/form-data:
          formParameters:
            file:
              description: The file to be uploaded
              required: true
              type: file
      responses:
        200:
          description: "Saved"
          headers:
            Location:
              description: URI to the created <<resourcePathName|!singularize>> item
        400:
          description: "Bad request"
          body:
            text/plain:
              example: |
                "unable to add <<resourcePathName|!singularize>>"
        500:
          description: "Internal server error, e.g. due to misconfiguration"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
  /uploadbinary:
    description: Uploads a file and saves it to a directory configured on the server
    post:
      is: [secured, upload-handler]
      description: |
          Uploads a file and saves it to a directory configured on the server
      body:
        application/octet-stream:
      responses:
        200:
          description: "Saved"
          headers:
            Location:
              description: URI to the created <<resourcePathName|!singularize>> item
        400:
          description: "Bad request"
          body:
            text/plain:
              example: |
                "unable to add <<resourcePathName|!singularize>>"
        500:
          description: "Internal server error, e.g. due to misconfiguration"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
  /collstats:
    put:
      description: This API allows you to set collection names that you would like to print statistics |
       for to the log. A recurring interval should be indicated as well to indicate how often to print the |
       statistics to the log - min interval is 10 seconds
      is: [secured]
      body:
        application/json:
          example: "{\"patrons\": 60, \"items\": 120}"
      responses:
        200:
          description: "Returns collections stats will be printed for and interval"
          body:
            application/json:
              example: "{\"collection\" : \"interval\" , \"collection\" : \"interval\"}"
        500:
          description: "Internal server error, e.g. due to misconfiguration"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
  /loglevel:
    put:
      description: Set logging level for all loggers in the JVM or just for a specific package / class
      is: [secured, log-level]
      responses:
        200:
          description: "Returns packages with log level of the updated packages"
          body:
            application/json:
              example: "{\"package\" : \"log level\" , \"package2\" : \"log level\"}"
        500:
          description: "Internal server error, e.g. due to misconfiguration"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
    get:
      description: Get the logging level for all loggers in the JVM
      is: [secured]
      responses:
        200:
          description: "Returns packages with log level"
          body:
            application/json:
              example: "{\"package\" : \"log level\" , \"package2\" : \"log level\"}"
        500:
          description: "Internal server error, e.g. due to misconfiguration"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
  /jstack:
    put:
      description: dumps jstacks every N seconds to a jstack file to find potential bottlenecks. Looking at this |
        file you can see if there are functions blocking for too long
      is: [secured]
      responses:
        204:
          description: "Jstack request successful"
        500:
          description: "Internal server error"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
    get:
      description: Get stack trace
      is: [secured]
      responses:
        200:
          description: "Returns the stack trace of all threads in the JVM"
          body:
            text/html:
              example: "Text....."
        500:
          description: "Internal server error"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
  /memory:
    get:
      description: Get JVM memory info
      is: [secured, history]
      responses:
        200:
          description: "Returns JVM memory info"
          body:
            text/html:
              example: "Text....."
        500:
          description: "Internal server error"
          body:
            text/plain:
              example: "Internal server error, contact administrator"
